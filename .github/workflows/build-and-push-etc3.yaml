name: 'Build, test and push etc3: Iter8 controller, task runner and iter8ctl'
# Parallelizing the tests to some degree

on:
  release:
    types: [published]
  push:
    branches:
    - '**' # run test and push on all branches
    tags:
    - v* # Publish `v1.2.3` tags as releases.
  pull_request: # Run tests for any PRs.

jobs:
  # Ensure tests pass on PRs.
  build-and-test:
    runs-on: ubuntu-latest
    steps:
    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: 1.16
    - name: Run Kubernetes tools
      uses: stefanprodan/kube-tools@v1
      with:
        kubectl: 1.18.2
        kustomize: 3.5.5
        helmv3: 3.2.1
    - name: Set up Kubebuilder 3.1.0
      run: |
        curl -L -o kubebuilder https://github.com/kubernetes-sigs/kubebuilder/releases/download/v3.1.0/kubebuilder_$(go env GOOS)_$(go env GOARCH)
        chmod +x kubebuilder && mv kubebuilder /usr/local/bin/
        export PATH=$PATH:/usr/local/kubebuilder/bin
    - name: Set up linter
      run: go get honnef.co/go/tools/cmd/staticcheck@latest
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
    - name: Get Fortio
      run: go get fortio.org/fortio@v1.17.0
    - name: Test
      run: make test # includes vet and lint (staticcheck)
    - name: Enforce coverage
      run: |
        export COVERAGE=$(go tool cover -func coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
        echo "code coverage is at ${COVERAGE}"
        if [ 1 -eq "$(echo "${COVERAGE} > 79.0" | bc)" ]; then \
          echo "all good... coverage is at or above 79.0%"; 
        else \
          echo "not good... coverage is not at 79.0% or above";
          exit 1
        fi
    - name: Upload coverage to Codecov
      if: github.event_name == 'push'
      uses: codecov/codecov-action@v2
      with:
        files: ./coverage.out

  # Ensure Docker builds work.
  test-docker-builds:
    runs-on: ubuntu-latest
    steps:
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
    - if: github.event_name == 'pull_request'
      uses: docker/setup-buildx-action@v1
    - name: Test docker build of controller
      if: github.event_name == 'pull_request'
      run: make docker-build-controller
    - name: Test docker build of taskrunner
      if: github.event_name == 'pull_request'
      run: make docker-build-taskrunner

  test-iter8ctl:
    strategy:
      matrix:
        go-version: [1.16.x,1.17.x]
        os: [macos-latest] ## did ubuntu-latest in build-and-test job 
    runs-on: ${{ matrix.os }}
    steps:
    - name: Install Go
      uses: actions/setup-go@v2
      with:
        go-version: ${{ matrix.go-version }}        
    - name: Set up Kubebuilder 3.1.0
      run: |
        curl -L -o kubebuilder https://github.com/kubernetes-sigs/kubebuilder/releases/download/v3.1.0/kubebuilder_$(go env GOOS)_$(go env GOARCH)
        chmod +x kubebuilder && mv kubebuilder /usr/local/bin/
        export PATH=$PATH:/usr/local/kubebuilder/bin
    - name: Checkout code
      uses: actions/checkout@v2
    ## Ran staticcheck, vet, lint in build-and-test job
    - name: Test
      run: make test-iter8ctl

  # Push etc3 images (controller and taskrunner) to dockerhub
  # run only on push and release events; not pull-requests
  build-and-push:
    # Ensure test job passes before pushing image.		
    needs: [build-and-test, test-docker-builds, test-iter8ctl]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'release'
    steps:
    - uses: actions/checkout@v2
    - uses: docker/setup-buildx-action@v1
    - uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_SECRET }}
    - name: Get version
      run: |
        tarref=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
        # Strip "v" prefix from tagref
        if [[ "${{ github.ref }}" == "refs/tags/"* ]]; then
          echo "VERSION=$(echo $tarref | sed -e 's/^v//')" >> $GITHUB_ENV
        elif [[ "${{ github.ref }}" == *"main" ]]; then
          echo "VERSION=latest" >> $GITHUB_ENV
        else
          echo "VERSION=$tarref" >> $GITHUB_ENV
        fi
    - name: Get owner and repo
      run: |
        ownerrepo=${{ github.repository }}
        owner=$(echo $ownerrepo | cut -f1 -d/)
        if [[ "$owner" == "iter8-tools" ]]; then
          owner=iter8
        fi
        echo "OWNER=$owner" >> $GITHUB_ENV
        echo "REPO=$(echo $ownerrepo | cut -f2 -d/)" >> $GITHUB_ENV
    - name: Build and push controller image
      uses: docker/build-push-action@v2
      with:
        context: .
        tags: ${{ env.OWNER }}/controller:${{ env.VERSION }}
        file: Dockerfile.controller
        push: true
    - name: Build and push taskrunner image
      uses: docker/build-push-action@v2
      with:
        context: .
        tags: ${{ env.OWNER }}/taskrunner:${{ env.VERSION }}
        file: Dockerfile.taskrunner
        push: true
